pipeline {
    agent any

    tools {
        maven 'Maven 3.8.7'   // Jenkins global tool name
        jdk 'JDK 17'          // Jenkins global tool name
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds') // Jenkins credential ID
        DOCKER_IMAGE = "venkatesh384/java-cicd-app"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/venkateswarluyendoti/EndtoEnd-CI-CD-Pipeline-for-Java-Application.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn --version'
                sh 'java -version'
                dir('app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('app') {
                    withSonarQubeEnv('MySonarQubeServer') {
                        sh '''
                            mvn clean verify sonar:sonar \
                            -Dsonar.projectKey=End-to-End-CICD-Pipeline \
                            -Dsonar.projectName="End-to-End-CICD-Pipeline" \
                            -Dsonar.host.url=http://44.210.122.242:9000 \
                            -Dsonar.token=sqp_dac24bd074e9842655cdb085ef2bf25d3d77c1b9
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        sh """
                            docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} -f docker/Dockerfile .
                            docker tag $DOCKER_IMAGE:${BUILD_NUMBER} $DOCKER_IMAGE:latest
                        """
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                dir('app') {
                    script {
                        sh """
                            echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                            docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                            docker push $DOCKER_IMAGE:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                dir('k8s') {
                    script {
                        // List files for verification
                        sh 'ls -l'

                        // Set kubeconfig
                        withEnv(["KUBECONFIG=/home/ubuntu/.kube/config"]) {
                            sh '''
                                if [ -f deployment.yaml ]; then
                                    kubectl apply -f deployment.yaml
                                    kubectl rollout status deployment java-cicd-app
                                else
                                    echo "deployment.yaml not found!"
                                    exit 1
                                fi

                                if [ -f service.yaml ]; then
                                    kubectl apply -f service.yaml
                                else
                                    echo "service.yaml not found!"
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
