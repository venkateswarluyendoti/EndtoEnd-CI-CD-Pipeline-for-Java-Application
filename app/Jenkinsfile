pipeline {
    agent any

    tools {
        maven 'Maven 3.8.7'
        jdk 'JDK 17'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        DOCKER_IMAGE = "venkatesh384/java-cicd-app"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/venkateswarluyendoti/EndtoEnd-CI-CD-Pipeline-for-Java-Application.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn --version'
                sh 'java -version'
                dir('app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('app') {
                    withSonarQubeEnv('MySonarQubeServer') {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                            sh '''
                                mvn clean verify sonar:sonar \
                                -Dsonar.projectKey=EndtoEnd-CI-CD-Pipeline-for-Java-Application \
                                -Dsonar.projectName=EndtoEnd-CI-CD-Pipeline-for-Java-Application \
                                -Dsonar.host.url=http://3.81.58.255:9000 \
                                -Dsonar.token=$SONAR_TOKEN
                            '''
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    sh """
                        docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} -f docker/Dockerfile . 
                        docker tag $DOCKER_IMAGE:${BUILD_NUMBER} $DOCKER_IMAGE:latest
                    """
                }
            }
        }

        stage('Install Trivy') {
            steps {
                sh '''
                    echo "üîπ Installing Trivy..."
                    if ! command -v trivy &> /dev/null; then
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                        mv ./bin/trivy /usr/local/bin/trivy
                        rm -rf ./bin
                    fi

                    trivy --version
                '''
            }
        }

        stage('Trivy Security Scan') {
            steps {
                dir('app') {
                    sh '''
                        echo "üîπ Running Trivy scan on image..."
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL $DOCKER_IMAGE:${BUILD_NUMBER} > trivy-report.txt
                        trivy image --exit-code 1 --severity CRITICAL $DOCKER_IMAGE:${BUILD_NUMBER} || true
                        cat trivy-report.txt
                    '''
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                dir('app') {
                    sh """
                        echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                        docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                        docker push $DOCKER_IMAGE:latest
                    """
                }
            }
        }

        stage('Install kubectl & ArgoCD CLI') {
            steps {
                sh '''
                    echo "üîπ Installing kubectl..."
                    if ! command -v kubectl &> /dev/null; then
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /usr/local/bin/
                    fi

                    echo "üîπ Installing Argo CD CLI..."
                    if ! command -v argocd &> /dev/null; then
                        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                        chmod +x argocd
                        mv argocd /usr/local/bin/
                    fi

                    kubectl version --client
                    argocd version --client
                '''
            }
        }

        stage('Apply Kubernetes Manifests (GitOps Style)') {
            steps {
                withCredentials([
                    file(credentialsId: 'kubeconfig-cred', variable: 'KUBECONFIG'),
                    usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')
                ]) {
                    dir('k8s') {
                        sh '''
                            echo "üîπ Updating Kubernetes manifests with new image tag..."
                            sed -i "s|image: venkatesh384/java-cicd-app:.*|image: venkatesh384/java-cicd-app:${BUILD_NUMBER}|g" deployment.yaml

                            echo "üîπ Committing changes to Git repo..."
                            git config user.name "venkateswarluyendoti"
                            git config user.email "venkateswarlu.yendoti99@gmail.com"
                            git add deployment.yaml
                            git commit -m "Update image to venkatesh384/java-cicd-app:${BUILD_NUMBER} [ci skip]" || echo "No changes to commit"

                            echo "üîπ Pushing changes to GitHub..."
                            git remote set-url origin https://$GIT_USER:$GIT_PASS@github.com/venkateswarluyendoti/EndtoEnd-CI-CD-Pipeline-for-Java-Application.git
                            git push origin master
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Jenkins Pipeline SUCCESS: Job ${env.JOB_NAME}, Build #${env.BUILD_NUMBER}"
        }
        failure {
            echo "‚ùå Jenkins Pipeline FAILED: Job ${env.JOB_NAME}, Build #${env.BUILD_NUMBER}"
        }
    }
}
