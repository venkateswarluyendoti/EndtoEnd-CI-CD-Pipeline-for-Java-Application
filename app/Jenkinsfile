pipeline {
    agent any

    tools {
        maven 'Maven 3.8.7'
        jdk 'JDK 17'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        DOCKER_IMAGE = "venkatesh384/java-cicd-app"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/venkateswarluyendoti/EndtoEnd-CI-CD-Pipeline-for-Java-Application.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn --version'
                sh 'java -version'
                dir('app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('app') {
                    withSonarQubeEnv('MySonarQubeServer') {
                        sh '''
                            mvn clean verify sonar:sonar \
                                -Dsonar.projectKey=End-to-End-CICD-Pipeline \
                                -Dsonar.projectName="End-to-End-CICD-Pipeline" \
                                -Dsonar.host.url=http://44.210.122.242:9000 \
                                -Dsonar.token=sqp_dac24bd074e9842655cdb085ef2bf25d3d77c1b9
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        sh """
                            docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} -f docker/Dockerfile .
                            docker tag $DOCKER_IMAGE:${BUILD_NUMBER} $DOCKER_IMAGE:latest
                        """
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                dir('app') {
                    script {
                        sh """
                            echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                            docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                            docker push $DOCKER_IMAGE:latest
                        """
                    }
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                // Ensure Helm is installed
                sh '''
                    if ! command -v helm &> /dev/null; then
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    fi
                    helm version
                '''

                // Deploy using Helm with kubeconfig credentials
                withCredentials([file(credentialsId: 'kubeconfig-id', variable: 'KUBECONFIG')]) {
                    dir('helm/java-cicd-app') {
                        sh """
                            helm upgrade --install java-cicd-app . \
                                --set image.repository=$DOCKER_IMAGE \
                                --set image.tag=${BUILD_NUMBER} \
                                --wait
                        """
                    }
                }
            }
        }

    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
