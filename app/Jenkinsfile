pipeline {
    agent any

    tools {
        maven 'Maven 3.8.7'
        jdk 'JDK 17'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        DOCKER_IMAGE = "venkatesh384/java-cicd-app"
        KUBE_CONFIG = credentials('kubeconfig-cred')
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/venkateswarluyendoti/EndtoEnd-CI-CD-Pipeline-for-Java-Application.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn --version'
                sh 'java -version'
                dir('app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('app') {
                    withSonarQubeEnv('MySonarQubeServer') {
                        sh '''
                            mvn clean verify sonar:sonar \
                            -Dsonar.projectKey=EndtoEnd-CI-CD-Pipeline-for-Java-Application \
                            -Dsonar.projectName='EndtoEnd-CI-CD-Pipeline-for-Java-Application' \
                            -Dsonar.host.url=http://3.87.3.241:9000 \
                            -Dsonar.token=sqp_cf45f4d0938cf718b691857f51118aeca5ea818a
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        sh """
                            docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} -f docker/Dockerfile .
                            docker tag $DOCKER_IMAGE:${BUILD_NUMBER} $DOCKER_IMAGE:latest
                        """
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                dir('app') {
                    script {
                        sh """
                            echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                            docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                            docker push $DOCKER_IMAGE:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                dir('k8s') {
                    withCredentials([file(credentialsId: 'kubeconfig-cred', variable: 'KUBECONFIG_FILE')]) {
                        sh '''
                            if ! command -v kubectl &> /dev/null; then
                                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                                chmod +x kubectl
                                mv kubectl /usr/local/bin/
                            fi

                            export KUBECONFIG=$KUBECONFIG_FILE
                            chmod 600 $KUBECONFIG

                            kubectl apply -f namespace.yaml --validate=false
                            kubectl apply -f deployment.yaml --validate=false
                            kubectl apply -f service.yaml --validate=false
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
