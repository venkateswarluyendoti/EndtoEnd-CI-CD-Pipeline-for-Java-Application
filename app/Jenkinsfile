pipeline {
    agent any

    tools {
        maven 'Maven 3.8.7'
        jdk 'JDK 17'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        DOCKER_IMAGE = "venkatesh384/java-cicd-app"
        HELM_RELEASE = "java-app"
        HELM_NAMESPACE = "java-app"
        HELM_CHART_DIR = "springboot-helm-chart"
        ARGOCD_APP_NAME = "java-app"
        AWS_REGION = "ap-south-1"
        EKS_CLUSTER = "java-eks"
        ARGOCD_SERVER = "13.217.118.188:31163"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/venkateswarluyendoti/EndtoEnd-CI-CD-Pipeline-for-Java-Application.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn --version'
                sh 'java -version'
                dir('app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('app') {
                    withSonarQubeEnv('MySonarQubeServer') {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                            sh '''
                                mvn clean verify sonar:sonar \
                                -Dsonar.projectKey=EndtoEnd-CI-CD-Pipeline-for-Java-Application \
                                -Dsonar.projectName=EndtoEnd-CI-CD-Pipeline-for-Java-Application \
                                -Dsonar.host.url=http://13.217.118.188:9000 \
                                -Dsonar.token=$SONAR_TOKEN
                            '''
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    sh """
                        docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} -f docker/Dockerfile .
                        docker tag $DOCKER_IMAGE:${BUILD_NUMBER} $DOCKER_IMAGE:latest
                    """
                }
            }
        }

        stage('Install Trivy') {
            steps {
                sh '''
                    echo "üîπ Installing Trivy..."
                    if ! command -v trivy &> /dev/null; then
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                        mkdir -p /usr/local/bin
                        mv ./bin/trivy /usr/local/bin/trivy
                        rm -rf ./bin
                    fi
                    trivy --version
                '''
            }
        }

        stage('Trivy Security Scan') {
            steps {
                dir('app') {
                    sh '''
                        echo "üîπ Running Trivy scan on image..."
                        trivy image --exit-code 0 --severity LOW,MEDIUM,HIGH,CRITICAL $DOCKER_IMAGE:${BUILD_NUMBER} > trivy-report.txt
                        trivy image --exit-code 1 --severity CRITICAL $DOCKER_IMAGE:${BUILD_NUMBER} || true
                        cat trivy-report.txt
                    '''
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                dir('app') {
                    sh """
                        echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                        docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                        docker push $DOCKER_IMAGE:latest
                    """
                }
            }
        }

        stage('Install AWS CLI, kubectl, Helm & ArgoCD CLI') {
            steps {
                sh '''
                    echo "üîπ Installing AWS CLI..."
                    if ! command -v aws &> /dev/null; then
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip -o awscliv2.zip
                        ./aws/install --update
                        rm -rf aws awscliv2.zip
                    fi
                    aws --version

                    echo "üîπ Installing kubectl..."
                    if ! command -v kubectl &> /dev/null; then
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /usr/local/bin/
                    fi

                    echo "üîπ Installing Helm..."
                    if ! command -v helm &> /dev/null; then
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    fi

                    echo "üîπ Installing Argo CD CLI..."
                    if ! command -v argocd &> /dev/null; then
                        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                        chmod +x argocd
                        mv argocd /usr/local/bin/
                    fi

                    kubectl version --client
                    helm version
                    argocd version --client
                '''
            }
        }

        stage('Update Helm Chart & Deploy to EKS') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS'),
                    usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    dir("${HELM_CHART_DIR}") {
                        sh """
                            set -e
                            echo "üîπ Updating Helm chart with new image tag..."
                            sed -i "s|repository: .*\$|repository: $DOCKER_IMAGE|" values.yaml
                            sed -i "s|tag: .*\$|tag: ${BUILD_NUMBER}|" values.yaml

                            echo "üîπ Committing updated Helm chart..."
                            git config user.name "venkateswarluyendoti"
                            git config user.email "venkateswarlu.yendoti99@gmail.com"
                            git add values.yaml
                            git commit -m "Update Helm chart image tag to ${BUILD_NUMBER} [ci skip]" || echo "No changes to commit"
                            git remote set-url origin https://$GIT_USER:$GIT_PASS@github.com/venkateswarluyendoti/EndtoEnd-CI-CD-Pipeline-for-Java-Application.git
                            git push origin main

                            echo "üîπ Configuring AWS CLI..."
                            export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
                            export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
                            export AWS_DEFAULT_REGION="$AWS_REGION"

                            echo "üîπ Updating kubeconfig for EKS..."
                            aws eks update-kubeconfig --name $EKS_CLUSTER

                            echo "üîπ Deploying Helm chart to EKS..."
                            helm upgrade --install $HELM_RELEASE . --namespace $HELM_NAMESPACE --create-namespace
                        """
                    }
                }
            }
        }

        stage('Sync ArgoCD App') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'argocd-creds', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_PASS')]) {
                    sh '''
                        echo "üîπ Logging into ArgoCD..."
                        argocd login $ARGOCD_SERVER \
                        --username $ARGOCD_USER \
                        --password $ARGOCD_PASS \
                        --insecure

                        echo "üîπ Syncing ArgoCD Application..."
                        argocd app sync $ARGOCD_APP_NAME --prune
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Jenkins Pipeline SUCCESS: Job ${env.JOB_NAME}, Build #${env.BUILD_NUMBER}"
        }
        failure {
            echo "‚ùå Jenkins Pipeline FAILED: Job ${env.JOB_NAME}, Build #${env.BUILD_NUMBER}"
        }
    }
}
