pipeline {
    agent any

    tools {
        maven 'Maven 3.8.7'
        jdk 'JDK 17'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        DOCKER_IMAGE = "venkatesh384/java-cicd-app"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/venkateswarluyendoti/EndtoEnd-CI-CD-Pipeline-for-Java-Application.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn --version'
                sh 'java -version'
                dir('app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('app') {
                    withSonarQubeEnv('MySonarQubeServer') {
                        sh '''
                            mvn clean verify sonar:sonar \
                              -Dsonar.projectKey=EndtoEnd-CI-CD-Pipeline-for-Java-Application \
                              -Dsonar.projectName=EndtoEnd-CI-CD-Pipeline-for-Java-Application \
                              -Dsonar.host.url=http://34.204.77.57:9000 \
                              -Dsonar.token=sqp_93fe46d2dde6e0804ca234e6989103018c01fd5d
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    sh """
                        docker build -t $DOCKER_IMAGE:${BUILD_NUMBER} -f docker/Dockerfile . 
                        docker tag $DOCKER_IMAGE:${BUILD_NUMBER} $DOCKER_IMAGE:latest
                    """
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                dir('app') {
                    sh """
                        echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                        docker push $DOCKER_IMAGE:${BUILD_NUMBER}
                        docker push $DOCKER_IMAGE:latest
                    """
                }
            }
        }

        stage('Install kubectl & ArgoCD CLI') {
            steps {
                sh '''
                    echo "üîπ Installing kubectl..."
                    if ! command -v kubectl &> /dev/null; then
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl /usr/local/bin/
                    fi

                    echo "üîπ Installing Argo CD CLI..."
                    if ! command -v argocd &> /dev/null; then
                        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                        chmod +x argocd
                        mv argocd /usr/local/bin/
                    fi

                    kubectl version --client
                    argocd version --client
                '''
            }
        }

        stage('Apply Kubernetes Manifests & Sync App with ArgoCD') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-cred', variable: 'KUBECONFIG')]) {
                    withCredentials([string(credentialsId: 'argocd-admin-password', variable: 'ARGOCD_PASSWORD')]) {
                        sh '''
                            echo "üîπ Logging into ArgoCD..."
                            argocd login 34.204.77.57:30441 \
                            --username admin \
                            --password $ARGOCD_PASSWORD \
                            echo "üîπ Syncing application with ArgoCD..."
                            argocd app sync java-cicd-app
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline executed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed!"
        }
    }
}
